!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!Go	package	/the real package specified by the package name/
!_TAG_FIELD_DESCRIPTION!Go	packageName	/the name for referring the package/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!DTD	E,entity	/entities/
!_TAG_KIND_DESCRIPTION!DTD	a,attribute	/attributes/
!_TAG_KIND_DESCRIPTION!DTD	e,element	/elements/
!_TAG_KIND_DESCRIPTION!DTD	n,notation	/notations/
!_TAG_KIND_DESCRIPTION!DTD	p,parameterEntity	/parameter entities/
!_TAG_KIND_DESCRIPTION!Go	M,anonMember	/struct anonymous members/
!_TAG_KIND_DESCRIPTION!Go	P,packageName	/name for specifying imported package/
!_TAG_KIND_DESCRIPTION!Go	Y,unknown	/unknown/
!_TAG_KIND_DESCRIPTION!Go	a,talias	/type aliases/
!_TAG_KIND_DESCRIPTION!Go	c,const	/constants/
!_TAG_KIND_DESCRIPTION!Go	f,func	/functions/
!_TAG_KIND_DESCRIPTION!Go	i,interface	/interfaces/
!_TAG_KIND_DESCRIPTION!Go	m,member	/struct members/
!_TAG_KIND_DESCRIPTION!Go	n,methodSpec	/interface method specification/
!_TAG_KIND_DESCRIPTION!Go	p,package	/packages/
!_TAG_KIND_DESCRIPTION!Go	s,struct	/structs/
!_TAG_KIND_DESCRIPTION!Go	t,type	/types/
!_TAG_KIND_DESCRIPTION!Go	v,var	/variables/
!_TAG_KIND_DESCRIPTION!Yaml	a,anchor	/anchors/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!DTD	0.0	/current.age/
!_TAG_PARSER_VERSION!Go	0.0	/current.age/
!_TAG_PARSER_VERSION!Yaml	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/vadim/GoProjects/GraphQLOzon/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	/v6.1.0/
!_TAG_ROLE_DESCRIPTION!DTD!element	attOwner	/attributes owner/
!_TAG_ROLE_DESCRIPTION!DTD!parameterEntity	condition	/conditions/
!_TAG_ROLE_DESCRIPTION!DTD!parameterEntity	elementName	/element names/
!_TAG_ROLE_DESCRIPTION!DTD!parameterEntity	partOfAttDef	/part of attribute definition/
!_TAG_ROLE_DESCRIPTION!Go!package	imported	/imported package/
!_TAG_ROLE_DESCRIPTION!Go!unknown	receiverType	/receiver type/
!_TAG_ROLE_DESCRIPTION!Yaml!anchor	alias	/alias/
Complexity	graph/generated.go	/^	Complexity ComplexityRoot$/;"	m	struct:graph.Config	typeref:typename:ComplexityRoot
Complexity	graph/generated.go	/^func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[s/;"	f	struct:graph.executableSchema	typeref:typename:(int, bool)
ComplexityRoot	graph/generated.go	/^type ComplexityRoot struct {$/;"	s	package:graph
Config	graph/generated.go	/^type Config struct {$/;"	s	package:graph
CreateTodo	graph/generated.go	/^	CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error)$/;"	n	interface:graph.MutationResolver	typeref:typename:(*model.Todo, error)
CreateTodo	graph/schema.resolvers.go	/^func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, er/;"	f	unknown:graph.mutationResolver	typeref:typename:(*model.Todo, error)
DirectiveRoot	graph/generated.go	/^type DirectiveRoot struct {$/;"	s	package:graph
Directives	graph/generated.go	/^	Directives DirectiveRoot$/;"	m	struct:graph.Config	typeref:typename:DirectiveRoot
Done	graph/model/models_gen.go	/^	Done bool   `json:"done"`$/;"	m	struct:model.Todo	typeref:typename:bool
Exec	graph/generated.go	/^func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {$/;"	f	struct:graph.executableSchema	typeref:typename:graphql.ResponseHandler
ID	graph/model/models_gen.go	/^	ID   string `json:"id"`$/;"	m	struct:model.Todo	typeref:typename:string
ID	graph/model/models_gen.go	/^	ID   string `json:"id"`$/;"	m	struct:model.User	typeref:typename:string
Mutation	graph/generated.go	/^	Mutation struct {$/;"	m	struct:graph.ComplexityRoot	typeref:typename:struct { CreateTodo func(childComplexity int, input model.NewTodo) int; }
Mutation	graph/generated.go	/^	Mutation() MutationResolver$/;"	n	interface:graph.ResolverRoot	typeref:typename:MutationResolver
Mutation	graph/model/models_gen.go	/^type Mutation struct {$/;"	s	package:model
Mutation	graph/schema.resolvers.go	/^func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }$/;"	f	unknown:graph.Resolver	typeref:typename:MutationResolver
MutationResolver	graph/generated.go	/^type MutationResolver interface {$/;"	i	package:graph
Name	graph/model/models_gen.go	/^	Name string `json:"name"`$/;"	m	struct:model.User	typeref:typename:string
NewExecutableSchema	graph/generated.go	/^func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {$/;"	f	package:graph	typeref:typename:graphql.ExecutableSchema
NewTodo	graph/model/models_gen.go	/^type NewTodo struct {$/;"	s	package:model
OperationContext	graph/generated.go	/^	*graphql.OperationContext$/;"	M	struct:graph.executionContext	typeref:typename:*graphql.OperationContext
Query	graph/generated.go	/^	Query struct {$/;"	m	struct:graph.ComplexityRoot	typeref:typename:struct { Todos func(childComplexity int) int; }
Query	graph/generated.go	/^	Query() QueryResolver$/;"	n	interface:graph.ResolverRoot	typeref:typename:QueryResolver
Query	graph/model/models_gen.go	/^type Query struct {$/;"	s	package:model
Query	graph/schema.resolvers.go	/^func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }$/;"	f	unknown:graph.Resolver	typeref:typename:QueryResolver
QueryResolver	graph/generated.go	/^type QueryResolver interface {$/;"	i	package:graph
Resolver	graph/resolver.go	/^type Resolver struct{}$/;"	s	package:graph
Resolver	graph/schema.resolvers.go	/^type mutationResolver struct{ *Resolver }$/;"	M	struct:graph.mutationResolver	typeref:typename:*Resolver
Resolver	graph/schema.resolvers.go	/^type queryResolver struct{ *Resolver }$/;"	M	struct:graph.queryResolver	typeref:typename:*Resolver
ResolverRoot	graph/generated.go	/^type ResolverRoot interface {$/;"	i	package:graph
Resolvers	graph/generated.go	/^	Resolvers  ResolverRoot$/;"	m	struct:graph.Config	typeref:typename:ResolverRoot
Schema	graph/generated.go	/^	Schema     *ast.Schema$/;"	m	struct:graph.Config	typeref:typename:*ast.Schema
Schema	graph/generated.go	/^func (e *executableSchema) Schema() *ast.Schema {$/;"	f	struct:graph.executableSchema	typeref:typename:*ast.Schema
Text	graph/model/models_gen.go	/^	Text   string `json:"text"`$/;"	m	struct:model.NewTodo	typeref:typename:string
Text	graph/model/models_gen.go	/^	Text string `json:"text"`$/;"	m	struct:model.Todo	typeref:typename:string
Todo	graph/generated.go	/^	Todo struct {$/;"	m	struct:graph.ComplexityRoot	typeref:typename:struct { Done func(childComplexity int) int; ID func(childComplexity int) int; Text func(childComplexity int) int; User func(childComplexity int) int; }
Todo	graph/model/models_gen.go	/^type Todo struct {$/;"	s	package:model
Todos	graph/generated.go	/^	Todos(ctx context.Context) ([]*model.Todo, error)$/;"	n	interface:graph.QueryResolver	typeref:typename:([]*model.Todo, error)
Todos	graph/schema.resolvers.go	/^func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {$/;"	f	unknown:graph.queryResolver	typeref:typename:([]*model.Todo, error)
User	graph/generated.go	/^	User struct {$/;"	m	struct:graph.ComplexityRoot	typeref:typename:struct { ID func(childComplexity int) int; Name func(childComplexity int) int; }
User	graph/model/models_gen.go	/^	User *User  `json:"user"`$/;"	m	struct:model.Todo	typeref:typename:*User
User	graph/model/models_gen.go	/^type User struct {$/;"	s	package:model
UserID	graph/model/models_gen.go	/^	UserID string `json:"userId"`$/;"	m	struct:model.NewTodo	typeref:typename:string
_Mutation	graph/generated.go	/^func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshal/;"	f	struct:graph.executionContext	typeref:typename:graphql.Marshaler
_Mutation_createTodo	graph/generated.go	/^func (ec *executionContext) _Mutation_createTodo(ctx context.Context, field graphql.CollectedFie/;"	f	struct:graph.executionContext	typeref:typename:(ret graphql.Marshaler)
_Query	graph/generated.go	/^func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler /;"	f	struct:graph.executionContext	typeref:typename:graphql.Marshaler
_Query___schema	graph/generated.go	/^func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (/;"	f	struct:graph.executionContext	typeref:typename:(ret graphql.Marshaler)
_Query___type	graph/generated.go	/^func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (re/;"	f	struct:graph.executionContext	typeref:typename:(ret graphql.Marshaler)
_Query_todos	graph/generated.go	/^func (ec *executionContext) _Query_todos(ctx context.Context, field graphql.CollectedField) (ret/;"	f	struct:graph.executionContext	typeref:typename:(ret graphql.Marshaler)
_Todo	graph/generated.go	/^func (ec *executionContext) _Todo(ctx context.Context, sel ast.SelectionSet, obj *model.Todo) gr/;"	f	struct:graph.executionContext	typeref:typename:graphql.Marshaler
_Todo_done	graph/generated.go	/^func (ec *executionContext) _Todo_done(ctx context.Context, field graphql.CollectedField, obj *m/;"	f	struct:graph.executionContext	typeref:typename:(ret graphql.Marshaler)
_Todo_id	graph/generated.go	/^func (ec *executionContext) _Todo_id(ctx context.Context, field graphql.CollectedField, obj *mod/;"	f	struct:graph.executionContext	typeref:typename:(ret graphql.Marshaler)
_Todo_text	graph/generated.go	/^func (ec *executionContext) _Todo_text(ctx context.Context, field graphql.CollectedField, obj *m/;"	f	struct:graph.executionContext	typeref:typename:(ret graphql.Marshaler)
_Todo_user	graph/generated.go	/^func (ec *executionContext) _Todo_user(ctx context.Context, field graphql.CollectedField, obj *m/;"	f	struct:graph.executionContext	typeref:typename:(ret graphql.Marshaler)
_User	graph/generated.go	/^func (ec *executionContext) _User(ctx context.Context, sel ast.SelectionSet, obj *model.User) gr/;"	f	struct:graph.executionContext	typeref:typename:graphql.Marshaler
_User_id	graph/generated.go	/^func (ec *executionContext) _User_id(ctx context.Context, field graphql.CollectedField, obj *mod/;"	f	struct:graph.executionContext	typeref:typename:(ret graphql.Marshaler)
_User_name	graph/generated.go	/^func (ec *executionContext) _User_name(ctx context.Context, field graphql.CollectedField, obj *m/;"	f	struct:graph.executionContext	typeref:typename:(ret graphql.Marshaler)
__DirectiveImplementors	graph/generated.go	/^var __DirectiveImplementors = []string{"__Directive"}$/;"	v	package:graph
__EnumValueImplementors	graph/generated.go	/^var __EnumValueImplementors = []string{"__EnumValue"}$/;"	v	package:graph
__FieldImplementors	graph/generated.go	/^var __FieldImplementors = []string{"__Field"}$/;"	v	package:graph
__InputValueImplementors	graph/generated.go	/^var __InputValueImplementors = []string{"__InputValue"}$/;"	v	package:graph
__SchemaImplementors	graph/generated.go	/^var __SchemaImplementors = []string{"__Schema"}$/;"	v	package:graph
__TypeImplementors	graph/generated.go	/^var __TypeImplementors = []string{"__Type"}$/;"	v	package:graph
___Directive	graph/generated.go	/^func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introsp/;"	f	struct:graph.executionContext	typeref:typename:graphql.Marshaler
___Directive_args	graph/generated.go	/^func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField,/;"	f	struct:graph.executionContext	typeref:typename:(ret graphql.Marshaler)
___Directive_description	graph/generated.go	/^func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.Collecte/;"	f	struct:graph.executionContext	typeref:typename:(ret graphql.Marshaler)
___Directive_isRepeatable	graph/generated.go	/^func (ec *executionContext) ___Directive_isRepeatable(ctx context.Context, field graphql.Collect/;"	f	struct:graph.executionContext	typeref:typename:(ret graphql.Marshaler)
___Directive_locations	graph/generated.go	/^func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedF/;"	f	struct:graph.executionContext	typeref:typename:(ret graphql.Marshaler)
___Directive_name	graph/generated.go	/^func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField,/;"	f	struct:graph.executionContext	typeref:typename:(ret graphql.Marshaler)
___EnumValue	graph/generated.go	/^func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introsp/;"	f	struct:graph.executionContext	typeref:typename:graphql.Marshaler
___EnumValue_deprecationReason	graph/generated.go	/^func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.Co/;"	f	struct:graph.executionContext	typeref:typename:(ret graphql.Marshaler)
___EnumValue_description	graph/generated.go	/^func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.Collecte/;"	f	struct:graph.executionContext	typeref:typename:(ret graphql.Marshaler)
___EnumValue_isDeprecated	graph/generated.go	/^func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.Collect/;"	f	struct:graph.executionContext	typeref:typename:(ret graphql.Marshaler)
___EnumValue_name	graph/generated.go	/^func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField,/;"	f	struct:graph.executionContext	typeref:typename:(ret graphql.Marshaler)
___Field	graph/generated.go	/^func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspecti/;"	f	struct:graph.executionContext	typeref:typename:graphql.Marshaler
___Field_args	graph/generated.go	/^func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj/;"	f	struct:graph.executionContext	typeref:typename:(ret graphql.Marshaler)
___Field_deprecationReason	graph/generated.go	/^func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.Collec/;"	f	struct:graph.executionContext	typeref:typename:(ret graphql.Marshaler)
___Field_description	graph/generated.go	/^func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedFie/;"	f	struct:graph.executionContext	typeref:typename:(ret graphql.Marshaler)
___Field_isDeprecated	graph/generated.go	/^func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedFi/;"	f	struct:graph.executionContext	typeref:typename:(ret graphql.Marshaler)
___Field_name	graph/generated.go	/^func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj/;"	f	struct:graph.executionContext	typeref:typename:(ret graphql.Marshaler)
___Field_type	graph/generated.go	/^func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj/;"	f	struct:graph.executionContext	typeref:typename:(ret graphql.Marshaler)
___InputValue	graph/generated.go	/^func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *intros/;"	f	struct:graph.executionContext	typeref:typename:graphql.Marshaler
___InputValue_defaultValue	graph/generated.go	/^func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.Collec/;"	f	struct:graph.executionContext	typeref:typename:(ret graphql.Marshaler)
___InputValue_description	graph/generated.go	/^func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.Collect/;"	f	struct:graph.executionContext	typeref:typename:(ret graphql.Marshaler)
___InputValue_name	graph/generated.go	/^func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField/;"	f	struct:graph.executionContext	typeref:typename:(ret graphql.Marshaler)
___InputValue_type	graph/generated.go	/^func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField/;"	f	struct:graph.executionContext	typeref:typename:(ret graphql.Marshaler)
___Schema	graph/generated.go	/^func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspect/;"	f	struct:graph.executionContext	typeref:typename:graphql.Marshaler
___Schema_description	graph/generated.go	/^func (ec *executionContext) ___Schema_description(ctx context.Context, field graphql.CollectedFi/;"	f	struct:graph.executionContext	typeref:typename:(ret graphql.Marshaler)
___Schema_directives	graph/generated.go	/^func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedFie/;"	f	struct:graph.executionContext	typeref:typename:(ret graphql.Marshaler)
___Schema_mutationType	graph/generated.go	/^func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedF/;"	f	struct:graph.executionContext	typeref:typename:(ret graphql.Marshaler)
___Schema_queryType	graph/generated.go	/^func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedFiel/;"	f	struct:graph.executionContext	typeref:typename:(ret graphql.Marshaler)
___Schema_subscriptionType	graph/generated.go	/^func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.Collec/;"	f	struct:graph.executionContext	typeref:typename:(ret graphql.Marshaler)
___Schema_types	graph/generated.go	/^func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, o/;"	f	struct:graph.executionContext	typeref:typename:(ret graphql.Marshaler)
___Type	graph/generated.go	/^func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspectio/;"	f	struct:graph.executionContext	typeref:typename:graphql.Marshaler
___Type_description	graph/generated.go	/^func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedFiel/;"	f	struct:graph.executionContext	typeref:typename:(ret graphql.Marshaler)
___Type_enumValues	graph/generated.go	/^func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField/;"	f	struct:graph.executionContext	typeref:typename:(ret graphql.Marshaler)
___Type_fields	graph/generated.go	/^func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, ob/;"	f	struct:graph.executionContext	typeref:typename:(ret graphql.Marshaler)
___Type_inputFields	graph/generated.go	/^func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedFiel/;"	f	struct:graph.executionContext	typeref:typename:(ret graphql.Marshaler)
___Type_interfaces	graph/generated.go	/^func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField/;"	f	struct:graph.executionContext	typeref:typename:(ret graphql.Marshaler)
___Type_kind	graph/generated.go	/^func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj /;"	f	struct:graph.executionContext	typeref:typename:(ret graphql.Marshaler)
___Type_name	graph/generated.go	/^func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj /;"	f	struct:graph.executionContext	typeref:typename:(ret graphql.Marshaler)
___Type_ofType	graph/generated.go	/^func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, ob/;"	f	struct:graph.executionContext	typeref:typename:(ret graphql.Marshaler)
___Type_possibleTypes	graph/generated.go	/^func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedFi/;"	f	struct:graph.executionContext	typeref:typename:(ret graphql.Marshaler)
___Type_specifiedByURL	graph/generated.go	/^func (ec *executionContext) ___Type_specifiedByURL(ctx context.Context, field graphql.CollectedF/;"	f	struct:graph.executionContext	typeref:typename:(ret graphql.Marshaler)
complexity	graph/generated.go	/^	complexity ComplexityRoot$/;"	m	struct:graph.executableSchema	typeref:typename:ComplexityRoot
defaultPort	server.go	/^const defaultPort = "8080"$/;"	c	package:main
deferred	graph/generated.go	/^	deferred        int32$/;"	m	struct:graph.executionContext	typeref:typename:int32
deferredResults	graph/generated.go	/^	deferredResults chan graphql.DeferredResult$/;"	m	struct:graph.executionContext	typeref:typename:chan graphql.DeferredResult
directives	graph/generated.go	/^	directives DirectiveRoot$/;"	m	struct:graph.executableSchema	typeref:typename:DirectiveRoot
executableSchema	graph/generated.go	/^	*executableSchema$/;"	M	struct:graph.executionContext	typeref:typename:*executableSchema
executableSchema	graph/generated.go	/^type executableSchema struct {$/;"	s	package:graph
executionContext	graph/generated.go	/^type executionContext struct {$/;"	s	package:graph
fieldContext_Mutation_createTodo	graph/generated.go	/^func (ec *executionContext) fieldContext_Mutation_createTodo(ctx context.Context, field graphql./;"	f	struct:graph.executionContext	typeref:typename:(fc *graphql.FieldContext, err error)
fieldContext_Query___schema	graph/generated.go	/^func (ec *executionContext) fieldContext_Query___schema(_ context.Context, field graphql.Collect/;"	f	struct:graph.executionContext	typeref:typename:(fc *graphql.FieldContext, err error)
fieldContext_Query___type	graph/generated.go	/^func (ec *executionContext) fieldContext_Query___type(ctx context.Context, field graphql.Collect/;"	f	struct:graph.executionContext	typeref:typename:(fc *graphql.FieldContext, err error)
fieldContext_Query_todos	graph/generated.go	/^func (ec *executionContext) fieldContext_Query_todos(_ context.Context, field graphql.CollectedF/;"	f	struct:graph.executionContext	typeref:typename:(fc *graphql.FieldContext, err error)
fieldContext_Todo_done	graph/generated.go	/^func (ec *executionContext) fieldContext_Todo_done(_ context.Context, field graphql.CollectedFie/;"	f	struct:graph.executionContext	typeref:typename:(fc *graphql.FieldContext, err error)
fieldContext_Todo_id	graph/generated.go	/^func (ec *executionContext) fieldContext_Todo_id(_ context.Context, field graphql.CollectedField/;"	f	struct:graph.executionContext	typeref:typename:(fc *graphql.FieldContext, err error)
fieldContext_Todo_text	graph/generated.go	/^func (ec *executionContext) fieldContext_Todo_text(_ context.Context, field graphql.CollectedFie/;"	f	struct:graph.executionContext	typeref:typename:(fc *graphql.FieldContext, err error)
fieldContext_Todo_user	graph/generated.go	/^func (ec *executionContext) fieldContext_Todo_user(_ context.Context, field graphql.CollectedFie/;"	f	struct:graph.executionContext	typeref:typename:(fc *graphql.FieldContext, err error)
fieldContext_User_id	graph/generated.go	/^func (ec *executionContext) fieldContext_User_id(_ context.Context, field graphql.CollectedField/;"	f	struct:graph.executionContext	typeref:typename:(fc *graphql.FieldContext, err error)
fieldContext_User_name	graph/generated.go	/^func (ec *executionContext) fieldContext_User_name(_ context.Context, field graphql.CollectedFie/;"	f	struct:graph.executionContext	typeref:typename:(fc *graphql.FieldContext, err error)
fieldContext___Directive_args	graph/generated.go	/^func (ec *executionContext) fieldContext___Directive_args(_ context.Context, field graphql.Colle/;"	f	struct:graph.executionContext	typeref:typename:(fc *graphql.FieldContext, err error)
fieldContext___Directive_description	graph/generated.go	/^func (ec *executionContext) fieldContext___Directive_description(_ context.Context, field graphq/;"	f	struct:graph.executionContext	typeref:typename:(fc *graphql.FieldContext, err error)
fieldContext___Directive_isRepeatable	graph/generated.go	/^func (ec *executionContext) fieldContext___Directive_isRepeatable(_ context.Context, field graph/;"	f	struct:graph.executionContext	typeref:typename:(fc *graphql.FieldContext, err error)
fieldContext___Directive_locations	graph/generated.go	/^func (ec *executionContext) fieldContext___Directive_locations(_ context.Context, field graphql./;"	f	struct:graph.executionContext	typeref:typename:(fc *graphql.FieldContext, err error)
fieldContext___Directive_name	graph/generated.go	/^func (ec *executionContext) fieldContext___Directive_name(_ context.Context, field graphql.Colle/;"	f	struct:graph.executionContext	typeref:typename:(fc *graphql.FieldContext, err error)
fieldContext___EnumValue_deprecationReason	graph/generated.go	/^func (ec *executionContext) fieldContext___EnumValue_deprecationReason(_ context.Context, field /;"	f	struct:graph.executionContext	typeref:typename:(fc *graphql.FieldContext, err error)
fieldContext___EnumValue_description	graph/generated.go	/^func (ec *executionContext) fieldContext___EnumValue_description(_ context.Context, field graphq/;"	f	struct:graph.executionContext	typeref:typename:(fc *graphql.FieldContext, err error)
fieldContext___EnumValue_isDeprecated	graph/generated.go	/^func (ec *executionContext) fieldContext___EnumValue_isDeprecated(_ context.Context, field graph/;"	f	struct:graph.executionContext	typeref:typename:(fc *graphql.FieldContext, err error)
fieldContext___EnumValue_name	graph/generated.go	/^func (ec *executionContext) fieldContext___EnumValue_name(_ context.Context, field graphql.Colle/;"	f	struct:graph.executionContext	typeref:typename:(fc *graphql.FieldContext, err error)
fieldContext___Field_args	graph/generated.go	/^func (ec *executionContext) fieldContext___Field_args(_ context.Context, field graphql.Collected/;"	f	struct:graph.executionContext	typeref:typename:(fc *graphql.FieldContext, err error)
fieldContext___Field_deprecationReason	graph/generated.go	/^func (ec *executionContext) fieldContext___Field_deprecationReason(_ context.Context, field grap/;"	f	struct:graph.executionContext	typeref:typename:(fc *graphql.FieldContext, err error)
fieldContext___Field_description	graph/generated.go	/^func (ec *executionContext) fieldContext___Field_description(_ context.Context, field graphql.Co/;"	f	struct:graph.executionContext	typeref:typename:(fc *graphql.FieldContext, err error)
fieldContext___Field_isDeprecated	graph/generated.go	/^func (ec *executionContext) fieldContext___Field_isDeprecated(_ context.Context, field graphql.C/;"	f	struct:graph.executionContext	typeref:typename:(fc *graphql.FieldContext, err error)
fieldContext___Field_name	graph/generated.go	/^func (ec *executionContext) fieldContext___Field_name(_ context.Context, field graphql.Collected/;"	f	struct:graph.executionContext	typeref:typename:(fc *graphql.FieldContext, err error)
fieldContext___Field_type	graph/generated.go	/^func (ec *executionContext) fieldContext___Field_type(_ context.Context, field graphql.Collected/;"	f	struct:graph.executionContext	typeref:typename:(fc *graphql.FieldContext, err error)
fieldContext___InputValue_defaultValue	graph/generated.go	/^func (ec *executionContext) fieldContext___InputValue_defaultValue(_ context.Context, field grap/;"	f	struct:graph.executionContext	typeref:typename:(fc *graphql.FieldContext, err error)
fieldContext___InputValue_description	graph/generated.go	/^func (ec *executionContext) fieldContext___InputValue_description(_ context.Context, field graph/;"	f	struct:graph.executionContext	typeref:typename:(fc *graphql.FieldContext, err error)
fieldContext___InputValue_name	graph/generated.go	/^func (ec *executionContext) fieldContext___InputValue_name(_ context.Context, field graphql.Coll/;"	f	struct:graph.executionContext	typeref:typename:(fc *graphql.FieldContext, err error)
fieldContext___InputValue_type	graph/generated.go	/^func (ec *executionContext) fieldContext___InputValue_type(_ context.Context, field graphql.Coll/;"	f	struct:graph.executionContext	typeref:typename:(fc *graphql.FieldContext, err error)
fieldContext___Schema_description	graph/generated.go	/^func (ec *executionContext) fieldContext___Schema_description(_ context.Context, field graphql.C/;"	f	struct:graph.executionContext	typeref:typename:(fc *graphql.FieldContext, err error)
fieldContext___Schema_directives	graph/generated.go	/^func (ec *executionContext) fieldContext___Schema_directives(_ context.Context, field graphql.Co/;"	f	struct:graph.executionContext	typeref:typename:(fc *graphql.FieldContext, err error)
fieldContext___Schema_mutationType	graph/generated.go	/^func (ec *executionContext) fieldContext___Schema_mutationType(_ context.Context, field graphql./;"	f	struct:graph.executionContext	typeref:typename:(fc *graphql.FieldContext, err error)
fieldContext___Schema_queryType	graph/generated.go	/^func (ec *executionContext) fieldContext___Schema_queryType(_ context.Context, field graphql.Col/;"	f	struct:graph.executionContext	typeref:typename:(fc *graphql.FieldContext, err error)
fieldContext___Schema_subscriptionType	graph/generated.go	/^func (ec *executionContext) fieldContext___Schema_subscriptionType(_ context.Context, field grap/;"	f	struct:graph.executionContext	typeref:typename:(fc *graphql.FieldContext, err error)
fieldContext___Schema_types	graph/generated.go	/^func (ec *executionContext) fieldContext___Schema_types(_ context.Context, field graphql.Collect/;"	f	struct:graph.executionContext	typeref:typename:(fc *graphql.FieldContext, err error)
fieldContext___Type_description	graph/generated.go	/^func (ec *executionContext) fieldContext___Type_description(_ context.Context, field graphql.Col/;"	f	struct:graph.executionContext	typeref:typename:(fc *graphql.FieldContext, err error)
fieldContext___Type_enumValues	graph/generated.go	/^func (ec *executionContext) fieldContext___Type_enumValues(ctx context.Context, field graphql.Co/;"	f	struct:graph.executionContext	typeref:typename:(fc *graphql.FieldContext, err error)
fieldContext___Type_fields	graph/generated.go	/^func (ec *executionContext) fieldContext___Type_fields(ctx context.Context, field graphql.Collec/;"	f	struct:graph.executionContext	typeref:typename:(fc *graphql.FieldContext, err error)
fieldContext___Type_inputFields	graph/generated.go	/^func (ec *executionContext) fieldContext___Type_inputFields(_ context.Context, field graphql.Col/;"	f	struct:graph.executionContext	typeref:typename:(fc *graphql.FieldContext, err error)
fieldContext___Type_interfaces	graph/generated.go	/^func (ec *executionContext) fieldContext___Type_interfaces(_ context.Context, field graphql.Coll/;"	f	struct:graph.executionContext	typeref:typename:(fc *graphql.FieldContext, err error)
fieldContext___Type_kind	graph/generated.go	/^func (ec *executionContext) fieldContext___Type_kind(_ context.Context, field graphql.CollectedF/;"	f	struct:graph.executionContext	typeref:typename:(fc *graphql.FieldContext, err error)
fieldContext___Type_name	graph/generated.go	/^func (ec *executionContext) fieldContext___Type_name(_ context.Context, field graphql.CollectedF/;"	f	struct:graph.executionContext	typeref:typename:(fc *graphql.FieldContext, err error)
fieldContext___Type_ofType	graph/generated.go	/^func (ec *executionContext) fieldContext___Type_ofType(_ context.Context, field graphql.Collecte/;"	f	struct:graph.executionContext	typeref:typename:(fc *graphql.FieldContext, err error)
fieldContext___Type_possibleTypes	graph/generated.go	/^func (ec *executionContext) fieldContext___Type_possibleTypes(_ context.Context, field graphql.C/;"	f	struct:graph.executionContext	typeref:typename:(fc *graphql.FieldContext, err error)
fieldContext___Type_specifiedByURL	graph/generated.go	/^func (ec *executionContext) fieldContext___Type_specifiedByURL(_ context.Context, field graphql./;"	f	struct:graph.executionContext	typeref:typename:(fc *graphql.FieldContext, err error)
field_Mutation_createTodo_args	graph/generated.go	/^func (ec *executionContext) field_Mutation_createTodo_args(ctx context.Context, rawArgs map[stri/;"	f	struct:graph.executionContext	typeref:typename:(map[string]interface{}, error)
field_Query___type_args	graph/generated.go	/^func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]inte/;"	f	struct:graph.executionContext	typeref:typename:(map[string]interface{}, error)
field___Type_enumValues_args	graph/generated.go	/^func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string/;"	f	struct:graph.executionContext	typeref:typename:(map[string]interface{}, error)
field___Type_fields_args	graph/generated.go	/^func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]int/;"	f	struct:graph.executionContext	typeref:typename:(map[string]interface{}, error)
gqlparser	graph/generated.go	/^	gqlparser "github.com\/vektah\/gqlparser\/v2"$/;"	P	package:github.com/vektah/gqlparser/v2
graph	graph/generated.go	/^package graph$/;"	p
graph	graph/resolver.go	/^package graph$/;"	p
graph	graph/schema.resolvers.go	/^package graph$/;"	p
introspectSchema	graph/generated.go	/^func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {$/;"	f	struct:graph.executionContext	typeref:typename:(*introspection.Schema, error)
introspectType	graph/generated.go	/^func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {$/;"	f	struct:graph.executionContext	typeref:typename:(*introspection.Type, error)
main	server.go	/^func main() {$/;"	f	package:main
main	server.go	/^package main$/;"	p
marshalNBoolean2bool	graph/generated.go	/^func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bo/;"	f	struct:graph.executionContext	typeref:typename:graphql.Marshaler
marshalNID2string	graph/generated.go	/^func (ec *executionContext) marshalNID2string(ctx context.Context, sel ast.SelectionSet, v strin/;"	f	struct:graph.executionContext	typeref:typename:graphql.Marshaler
marshalNString2string	graph/generated.go	/^func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v s/;"	f	struct:graph.executionContext	typeref:typename:graphql.Marshaler
marshalNTodo2githubᚗcomᚋVadimRightᚋGraphQLOzonᚋgraphᚋmodelᚐTodo	graph/generated.go	/^func (ec *executionContext) marshalNTodo2githubᚗcomᚋVadimRightᚋGraphQLOzonᚋgraphᚋmodel/;"	f	struct:graph.executionContext	typeref:typename:graphql.Marshaler
marshalNTodo2ᚕᚖgithubᚗcomᚋVadimRightᚋGraphQLOzonᚋgraphᚋmodelᚐTodoᚄ	graph/generated.go	/^func (ec *executionContext) marshalNTodo2ᚕᚖgithubᚗcomᚋVadimRightᚋGraphQLOzonᚋgraphᚋ/;"	f	struct:graph.executionContext	typeref:typename:graphql.Marshaler
marshalNTodo2ᚖgithubᚗcomᚋVadimRightᚋGraphQLOzonᚋgraphᚋmodelᚐTodo	graph/generated.go	/^func (ec *executionContext) marshalNTodo2ᚖgithubᚗcomᚋVadimRightᚋGraphQLOzonᚋgraphᚋmo/;"	f	struct:graph.executionContext	typeref:typename:graphql.Marshaler
marshalNUser2ᚖgithubᚗcomᚋVadimRightᚋGraphQLOzonᚋgraphᚋmodelᚐUser	graph/generated.go	/^func (ec *executionContext) marshalNUser2ᚖgithubᚗcomᚋVadimRightᚋGraphQLOzonᚋgraphᚋmo/;"	f	struct:graph.executionContext	typeref:typename:graphql.Marshaler
marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective	graph/generated.go	/^func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋin/;"	f	struct:graph.executionContext	typeref:typename:graphql.Marshaler
marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ	graph/generated.go	/^func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋ/;"	f	struct:graph.executionContext	typeref:typename:graphql.Marshaler
marshalN__DirectiveLocation2string	graph/generated.go	/^func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.Sele/;"	f	struct:graph.executionContext	typeref:typename:graphql.Marshaler
marshalN__DirectiveLocation2ᚕstringᚄ	graph/generated.go	/^func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel as/;"	f	struct:graph.executionContext	typeref:typename:graphql.Marshaler
marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue	graph/generated.go	/^func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋin/;"	f	struct:graph.executionContext	typeref:typename:graphql.Marshaler
marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField	graph/generated.go	/^func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintros/;"	f	struct:graph.executionContext	typeref:typename:graphql.Marshaler
marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue	graph/generated.go	/^func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋi/;"	f	struct:graph.executionContext	typeref:typename:graphql.Marshaler
marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ	graph/generated.go	/^func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋ/;"	f	struct:graph.executionContext	typeref:typename:graphql.Marshaler
marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType	graph/generated.go	/^func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrosp/;"	f	struct:graph.executionContext	typeref:typename:graphql.Marshaler
marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ	graph/generated.go	/^func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintr/;"	f	struct:graph.executionContext	typeref:typename:graphql.Marshaler
marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType	graph/generated.go	/^func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintr/;"	f	struct:graph.executionContext	typeref:typename:graphql.Marshaler
marshalN__TypeKind2string	graph/generated.go	/^func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet,/;"	f	struct:graph.executionContext	typeref:typename:graphql.Marshaler
marshalOBoolean2bool	graph/generated.go	/^func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bo/;"	f	struct:graph.executionContext	typeref:typename:graphql.Marshaler
marshalOBoolean2ᚖbool	graph/generated.go	/^func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v/;"	f	struct:graph.executionContext	typeref:typename:graphql.Marshaler
marshalOString2ᚖstring	graph/generated.go	/^func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, /;"	f	struct:graph.executionContext	typeref:typename:graphql.Marshaler
marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ	graph/generated.go	/^func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋ/;"	f	struct:graph.executionContext	typeref:typename:graphql.Marshaler
marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ	graph/generated.go	/^func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋint/;"	f	struct:graph.executionContext	typeref:typename:graphql.Marshaler
marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ	graph/generated.go	/^func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋ/;"	f	struct:graph.executionContext	typeref:typename:graphql.Marshaler
marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema	graph/generated.go	/^func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋin/;"	f	struct:graph.executionContext	typeref:typename:graphql.Marshaler
marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ	graph/generated.go	/^func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintr/;"	f	struct:graph.executionContext	typeref:typename:graphql.Marshaler
marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType	graph/generated.go	/^func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintr/;"	f	struct:graph.executionContext	typeref:typename:graphql.Marshaler
model	graph/model/models_gen.go	/^package model$/;"	p
mutationImplementors	graph/generated.go	/^var mutationImplementors = []string{"Mutation"}$/;"	v	package:graph
mutationResolver	graph/schema.resolvers.go	/^type mutationResolver struct{ *Resolver }$/;"	s	package:graph
parsedSchema	graph/generated.go	/^var parsedSchema = gqlparser.MustLoadSchema(sources...)$/;"	v	package:graph
pendingDeferred	graph/generated.go	/^	pendingDeferred int32$/;"	m	struct:graph.executionContext	typeref:typename:int32
processDeferredGroup	graph/generated.go	/^func (ec *executionContext) processDeferredGroup(dg graphql.DeferredGroup) {$/;"	f	struct:graph.executionContext
queryImplementors	graph/generated.go	/^var queryImplementors = []string{"Query"}$/;"	v	package:graph
queryResolver	graph/schema.resolvers.go	/^type queryResolver struct{ *Resolver }$/;"	s	package:graph
resolvers	graph/generated.go	/^	resolvers  ResolverRoot$/;"	m	struct:graph.executableSchema	typeref:typename:ResolverRoot
schema	graph/generated.go	/^	schema     *ast.Schema$/;"	m	struct:graph.executableSchema	typeref:typename:*ast.Schema
sourceData	graph/generated.go	/^func sourceData(filename string) string {$/;"	f	package:graph	typeref:typename:string
sources	graph/generated.go	/^var sources = []*ast.Source{$/;"	v	package:graph
sourcesFS	graph/generated.go	/^var sourcesFS embed.FS$/;"	v	package:graph	typeref:typename:embed.FS
todoImplementors	graph/generated.go	/^var todoImplementors = []string{"Todo"}$/;"	v	package:graph
tools	tools.go	/^package tools$/;"	p
unmarshalInputNewTodo	graph/generated.go	/^func (ec *executionContext) unmarshalInputNewTodo(ctx context.Context, obj interface{}) (model.N/;"	f	struct:graph.executionContext	typeref:typename:(model.NewTodo, error)
unmarshalNBoolean2bool	graph/generated.go	/^func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, er/;"	f	struct:graph.executionContext	typeref:typename:(bool, error)
unmarshalNID2string	graph/generated.go	/^func (ec *executionContext) unmarshalNID2string(ctx context.Context, v interface{}) (string, err/;"	f	struct:graph.executionContext	typeref:typename:(string, error)
unmarshalNNewTodo2githubᚗcomᚋVadimRightᚋGraphQLOzonᚋgraphᚋmodelᚐNewTodo	graph/generated.go	/^func (ec *executionContext) unmarshalNNewTodo2githubᚗcomᚋVadimRightᚋGraphQLOzonᚋgraphᚋ/;"	f	struct:graph.executionContext	typeref:typename:(model.NewTodo, error)
unmarshalNString2string	graph/generated.go	/^func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string,/;"	f	struct:graph.executionContext	typeref:typename:(string, error)
unmarshalN__DirectiveLocation2string	graph/generated.go	/^func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interfac/;"	f	struct:graph.executionContext	typeref:typename:(string, error)
unmarshalN__DirectiveLocation2ᚕstringᚄ	graph/generated.go	/^func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v in/;"	f	struct:graph.executionContext	typeref:typename:([]string, error)
unmarshalN__TypeKind2string	graph/generated.go	/^func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (str/;"	f	struct:graph.executionContext	typeref:typename:(string, error)
unmarshalOBoolean2bool	graph/generated.go	/^func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, er/;"	f	struct:graph.executionContext	typeref:typename:(bool, error)
unmarshalOBoolean2ᚖbool	graph/generated.go	/^func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool/;"	f	struct:graph.executionContext	typeref:typename:(*bool, error)
unmarshalOString2ᚖstring	graph/generated.go	/^func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*str/;"	f	struct:graph.executionContext	typeref:typename:(*string, error)
userImplementors	graph/generated.go	/^var userImplementors = []string{"User"}$/;"	v	package:graph
