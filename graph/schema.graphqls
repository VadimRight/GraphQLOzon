directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

type User {
  id: ID!
  username: String!
  password: String!
  posts: [Post!]!
  comments: [Comment!]!
}

type Post {
  id: ID!
  text: String!
  authorId: ID!
  author: User!
  comments: [CommentResponse!]!
}

type Comment {
  id: ID!
  comment: String!
  authorId: ID!
  itemId: ID!
  author: User!
}


type CommentResponse {
  id: ID!
  comment: String!
  authorId: ID!
  postId: ID!
  parentCommentID: ID
  author: User!
  replies: [CommentResponse!]!
}

type Query {
  userByUsername(username: String!): User!
  users: [User!]!
  user(id: ID!): User
  posts: [Post!]!
  post(id: ID!): Post
  comments: [CommentResponse!]!
  comment(id: ID!): CommentResponse
}

type Mutation {
  loginUser(username: String!, password: String!): Token! @goField(forceResolver: true)
  registerUser(username: String!, password: String!): User!

  updateUserPassword(id: ID!, password: String!): User!
  updateUserUsername(id: ID!, username: String!): User!
  deleteUser(id: ID!): User!

  createPost(text: String!): Post!
  updatePost(id: ID!, text: String!): Post!
  deletePost(id: ID!): Post!

  createComment(comment: String!, itemId: ID!): CommentResponse!
  updateComment(id: ID!, comment: String!): Comment!
}

type Token {
  token: String!
}
